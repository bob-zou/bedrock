package http

import (
    "{{.ModPrefix}}{{.Name}}/internal/conf"
    "{{.ModPrefix}}{{.Name}}/internal/model"
    "{{.ModPrefix}}{{.Name}}/internal/service"
    "net/http"
    "time"

    "github.com/gin-gonic/gin"
    ginSwagger "github.com/swaggo/gin-swagger"
    "github.com/swaggo/gin-swagger/swaggerFiles"

    _ "{{.ModPrefix}}{{.Name}}/docs"
)

var svc *service.Service

// New new a http server.
func New(s *service.Service) (engine *http.Server, err error) {
	var cfg struct {
		Addr         string
		ReadTimeout  time.Duration
		WriteTimeout time.Duration
	}
	if err = conf.Load("http.json", &cfg); err != nil {
		return
	}
	svc = s

	router := gin.Default()
	initRouter(router)
	engine = &http.Server{
		Addr:         cfg.Addr,
		Handler:      router,
		ReadTimeout:  cfg.ReadTimeout * time.Second,
		WriteTimeout: cfg.WriteTimeout * time.Second,
	}

	go func() {
		if err = engine.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			panic(err)
		}
	}()
	return
}

func initRouter(r *gin.Engine) {
    r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	r.GET("/monitor/ping", ping)
    g := r.Group("/{{.Name}}")
    {
        g.GET("/start", howToStart)
    }
}


// @Accept  json
// @Produce  json
// @Success 200 {object} http.CommonResponse{data=string}
// @Router /monitor/ping [get]
func ping(c *gin.Context) {
	if err := svc.Ping(); err != nil {
		c.AbortWithStatus(http.StatusServiceUnavailable)
	}
	c.JSON(http.StatusOK, CommonResponse{Data: "PONG"})
}

// @Summary demo interface
// @Accept  json
// @Produce  json
// @Success 200 {object} http.CommonResponse{data=model.Bedrock}
// @Router /{{.Name}}/start [get]
func howToStart(c *gin.Context) {
	k := &model.Bedrock{
		Hello: "Golang 大法好 !!!",
	}
	c.JSON(http.StatusOK, CommonResponse{Data: k})
}